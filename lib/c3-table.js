// Generated by IcedCoffeeScript 108.0.9
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  c3.Table = (function(_super) {
    __extends(Table, _super);

    Table.version = 0.1;

    Table.prototype.type = 'table';

    Table.prototype.data = [];

    Table.prototype.key = void 0;

    Table.prototype.filter = void 0;

    Table.prototype.columns = [];

    Table.prototype.selectable = false;

    Table.prototype.sortable = false;

    Table.prototype.sort_column = void 0;

    Table.prototype.limit_rows = void 0;

    Table.prototype.pagination = false;

    Table.prototype.max_pages_in_paginator = 9;

    Table.prototype.searchable = false;

    Table.prototype.searchable_if_not_paginated = true;

    Table.prototype.table_options = void 0;

    Table.prototype.table_header_options = void 0;

    Table.prototype.header_options = void 0;

    Table.prototype.footer_options = void 0;

    Table.prototype.table_body_options = void 0;

    Table.prototype.row_options = void 0;

    Table.prototype.cell_options = void 0;

    Table.prototype.vis_options = void 0;

    function Table() {
      this.select = __bind(this.select, this);
      this.highlight = __bind(this.highlight, this);
      this.sort = __bind(this.sort, this);
      this._style = __bind(this._style, this);
      this._update = __bind(this._update, this);
      this._update_headers = __bind(this._update_headers, this);
      this._init = __bind(this._init, this);
      Table.__super__.constructor.apply(this, arguments);
      this.selections = [];
    }

    Table.prototype._init = function() {
      var column, _base, _base1, _base2, _base3, _i, _len, _ref;
      this.table = c3.select(d3.select(this.anchor), 'table').singleton();
      if (this.table_options == null) {
        this.table_options = {};
      }
      if ((_base = this.table_options).styles == null) {
        _base.styles = {};
      }
      if ((_base1 = this.table_options.styles).width == null) {
        _base1.width = '100%';
      }
      this.table.options(this.table_options).update();
      this.header = this.table.inherit('thead').inherit('tr');
      this.header.options(this.table_header_options).update();
      this.body = this.table.inherit('tbody');
      this.body.options(this.table_body_options).update();
      if (this.next_column_key == null) {
        this.next_column_key = 0;
      }
      _ref = this.columns;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        column = _ref[_i];
        if (column.key == null) {
          column.key = this.next_column_key++;
        }
        if (column.header == null) {
          column.header = {};
        }
        if ((_base2 = column.header).text == null) {
          _base2.text = "";
        }
        if (column.cells == null) {
          column.cells = {};
        }
        if ((_base3 = column.cells).text == null) {
          _base3.text = "";
        }
        if (column.sortable == null) {
          column.sortable = column.sort != null;
        }
        if (column.value == null) {
          column.value = column.sort;
        }
        if (column.sort == null) {
          column.sort = column.value;
        }
        if (column.sortable && (column.sort == null)) {
          throw "column.sort() or column.value() not defined for a sortable column";
        }
        if (column.vis && (column.value == null)) {
          throw "column.value() not defined for a column with a column.vis visualization";
        }
      }
      return this._update_headers();
    };

    Table.prototype._update_headers = function() {
      var self;
      self = this;
      this.headers = this.header.select('th').bind(this.columns, function(column) {
        return column.key;
      }).options(this.header_options, (function(column) {
        return column.header;
      })).update();
      this.headers["new"].on('click.sort', (function(_this) {
        return function(column) {
          if (_this.sortable && column.sortable) {
            return _this.sort(column);
          }
        };
      })(this));
      if (this.sortable) {
        return this.headers.all.each(function(column) {
          var title;
          if (column === self.sort_column) {
            title = d3.select(this);
            return title.html(title.html() + ("<span class='arrow' style='float:right'>" + (column.sort_ascending ? '▲' : '▼') + "</span>"));
          }
        });
      }
    };

    Table.prototype._update = function(origin) {
      var cell_contents, column, current_page, d, data, datum, i, last_found, last_search, left_pages, next_button, num_pages, page_buttons, pages, paginate, paginator, prev_button, right_pages, search_control, search_input, searchable, self, _i, _j, _k, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _results;
      self = this;
      _ref = this.columns;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        column = _ref[_i];
        if (!column.vis) {
          continue;
        }
        column.value_total = (_ref1 = (_ref2 = typeof column.total_value === "function" ? column.total_value() : void 0) != null ? _ref2 : column.total_value) != null ? _ref1 : void 0;
        if (column.value_total == null) {
          column.value_total = 0;
          _ref3 = this.data;
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            datum = _ref3[_j];
            column.value_total += column.value(datum);
          }
        }
      }
      this.current_data = this.filter != null ? (function() {
        var _k, _len2, _ref4, _results;
        _ref4 = this.data;
        _results = [];
        for (i = _k = 0, _len2 = _ref4.length; _k < _len2; i = ++_k) {
          d = _ref4[i];
          if (this.filter(d, i)) {
            _results.push(d);
          }
        }
        return _results;
      }).call(this) : this.data;
      if (this.sort_column != null) {
        if (this.filter == null) {
          this.current_data = this.current_data.slice(0);
        }
        c3.array.sort_up(this.current_data, this.sort_column.sort);
        if (!this.sort_column.sort_ascending) {
          this.current_data.reverse();
        }
      }
      data = (function() {
        if (!this.limit_rows) {
          return this.current_data;
        } else {
          this.limit_rows = Math.floor(this.limit_rows);
          if (isNaN(this.limit_rows)) {
            throw Error("limit_rows set to non-numeric value: " + this.limit_rows);
          }
          current_page = isNaN(this.pagination) ? 1 : this.pagination;
          current_page = Math.max(1, Math.min(Math.ceil(this.current_data.length / this.limit_rows), current_page));
          if (this.pagination) {
            this.pagination = current_page;
          }
          return this.current_data.slice(this.limit_rows * (current_page - 1), +((this.limit_rows * current_page) - 1) + 1 || 9e9);
        }
      }).call(this);
      this.rows = this.body.select('tr').bind(data, this.key);
      this.rows.options(this.row_options).update();
      if (this.key != null) {
        this.rows.all.order();
      }
      this.cells = this.rows.select('td').bind(((function(_this) {
        return function(d) {
          var _k, _len2, _ref4, _results;
          _ref4 = _this.columns;
          _results = [];
          for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
            column = _ref4[_k];
            _results.push(d);
          }
          return _results;
        };
      })(this)), (function(_this) {
        return function(d, i) {
          return _this.columns[i].key;
        };
      })(this));
      if (!this.columns.some(function(column) {
        return column.vis != null;
      })) {
        cell_contents = this.cells;
      } else {
        this.vis = this.cells.inherit('div.vis');
        this.vis.options(this.vis_options, ((function(_this) {
          return function(d, i) {
            return _this.columns[i].vis_options;
          };
        })(this))).update();
        cell_contents = this.vis.inherit('span');
        this.vis.all.each(function(d, i) {
          column = self.columns[i % self.columns.length];
          switch (column.vis) {
            case 'bar':
              return d3.select(this).classed('bar', true).style('width', column.value(d) / column.value_total * 100 + '%');
          }
        });
      }
      cell_contents.options(this.cell_options, ((function(_this) {
        return function(d, i) {
          return _this.columns[i].cells;
        };
      })(this))).update();
      this.cells.options(this.cell_options, ((function(_this) {
        return function(d, i) {
          return _this.columns[i].cells;
        };
      })(this)));
      if (this.selectable) {
        (origin === 'render' ? this.rows.all : this.rows["new"]).on('click.select', (function(_this) {
          return function(item) {
            return _this.select(c3.Table.set_select(_this.selections, item, _this.selectable === 'multi' || (_this.selectable === true && d3.event.ctrlKey)));
          };
        })(this));
        this.highlight();
      } else if (origin === 'render') {
        this.rows.all.on('click.select', null);
      }
      this.footer = this.table.select('caption');
      paginate = !!this.limit_rows && this.pagination && this.current_data.length > this.limit_rows;
      searchable = this.searchable && (this.searchable_if_not_paginated || paginate);
      if (searchable || paginate) {
        this.footer.singleton().options(this.footer_options).update();
        paginator = this.footer.select('span.pagination', ':first-child');
        if (paginate) {
          paginator.singleton();
          num_pages = Math.ceil(this.current_data.length / this.limit_rows);
          this.max_pages_in_paginator = Math.floor(Math.max(this.max_pages_in_paginator, 3));
          left_pages = Math.ceil((this.max_pages_in_paginator - 3) / 2);
          right_pages = Math.floor((this.max_pages_in_paginator - 3) / 2);
          prev_button = paginator.select('span.prev.button').singleton();
          prev_button["new"].text('◀').on('click', (function(_this) {
            return function() {
              _this.pagination--;
              return _this.redraw();
            };
          })(this));
          prev_button.all.classed('disabled', current_page <= 1);
          pages = [1].concat(__slice.call((num_pages > 2 ? (function() {
              _results = [];
              for (var _k = _ref4 = Math.max(2, Math.min(this.pagination - left_pages, num_pages - 1 - left_pages - right_pages)), _ref5 = Math.min(num_pages - 1, Math.max(current_page + right_pages, 2 + left_pages + right_pages)); _ref4 <= _ref5 ? _k <= _ref5 : _k >= _ref5; _ref4 <= _ref5 ? _k++ : _k--){ _results.push(_k); }
              return _results;
            }).apply(this) : [])), [num_pages]);
          if (pages[1] - pages[0] > 1) {
            pages.splice(1, 0, '…');
          }
          if (pages[pages.length - 1] - pages[pages.length - 2] > 1) {
            pages.splice(pages.length - 1, 0, '…');
          }
          page_buttons = paginator.select('ul').singleton().select('li').bind(pages);
          page_buttons["new"].on('click', (function(_this) {
            return function(p) {
              _this.pagination = p;
              return _this.redraw();
            };
          })(this));
          page_buttons.all.classed('active', (function(_this) {
            return function(p) {
              return p === current_page;
            };
          })(this)).classed('disabled', (function(_this) {
            return function(p) {
              return p === '…';
            };
          })(this)).text(function(p, i) {
            return p;
          });
          next_button = paginator.select('span.next.button').singleton();
          next_button["new"].text('▶').on('click', (function(_this) {
            return function() {
              _this.pagination++;
              return _this.redraw();
            };
          })(this));
          next_button.all.classed('disabled', current_page >= this.current_data.length / this.limit_rows);
        } else {
          paginator.remove();
        }
        search_control = this.footer.select('span.search');
        if (searchable && !(!paginate && this.current_data.length > this.limit_rows)) {
          last_search = "";
          last_found = -1;
          search_control.singleton();
          search_control.inherit('span.button')["new"].text('🔎').on('click', (function(_this) {
            return function() {
              var column_contents, content, re, value, _l, _len2, _ref6;
              search_input.node().classList.remove('notfound');
              value = search_input.node().value;
              if (!value) {
                return;
              }
              re = RegExp(value, 'i');
              if (value !== last_search) {
                last_found = -1;
                last_search = value;
              }
              content = _this.searchable === true ? (column_contents = (function() {
                var _l, _len2, _ref6, _ref7, _ref8, _ref9, _results1;
                _ref6 = this.columns;
                _results1 = [];
                for (_l = 0, _len2 = _ref6.length; _l < _len2; _l++) {
                  column = _ref6[_l];
                  _results1.push(c3.functor((_ref7 = (_ref8 = (_ref9 = column.cells.html) != null ? _ref9 : column.cells.text) != null ? _ref8 : this.cell_options.html) != null ? _ref7 : this.cell_options.text));
                }
                return _results1;
              }).call(_this), function(d, i) {
                var column_content, j;
                return ((function() {
                  var _l, _len2, _results1;
                  _results1 = [];
                  for (j = _l = 0, _len2 = column_contents.length; _l < _len2; j = ++_l) {
                    column_content = column_contents[j];
                    _results1.push(column_content(d, i, j));
                  }
                  return _results1;
                })()).join(' ');
              }) : _this.searchable;
              _ref6 = _this.current_data;
              for (i = _l = 0, _len2 = _ref6.length; _l < _len2; i = ++_l) {
                d = _ref6[i];
                if (i > last_found) {
                  if (re.test(content(d, i))) {
                    last_found = i;
                    _this.pagination = Math.ceil((i + 1) / _this.limit_rows);
                    _this.redraw();
                    _this.trigger('match', value, d, i);
                    return;
                  }
                }
              }
              last_found = -1;
              search_input.node().classList.add('notfound');
              return _this.trigger('match', value, null, null);
            };
          })(this));
          return search_input = search_control.inherit('input')["new"].attr('type', 'text').on('keydown', function() {
            this.classList.remove('notfound');
            if (this.value && d3.event.keyCode === 13) {
              return search_control.select('.button').node().click();
            }
          });
        } else {
          return search_control.remove();
        }
      } else {
        return this.footer.remove();
      }
    };

    Table.prototype._style = function(style_new) {
      var klass, self, sort_column_i, _i, _len, _ref, _ref1;
      self = this;
      this.table.style().all.classed({
        'c3': true,
        'table': true,
        'sortable': this.sortable,
        'selectable': this.selectable,
        'single_select': this.selectable === 'single',
        'multi_select': this.selectable === 'multi',
        'paginated': this.pagination && this.limit_rows && this.current_data.length > this.limit_rows,
        'searchable': !!this.searchable
      });
      if (this["class"] != null) {
        _ref = this["class"].split(' ');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          klass = _ref[_i];
          this.table.all.classed(klass, true);
        }
      }
      this.header.style();
      this.headers.style(style_new).all.classed({
        'sortable': !this.sortable ? false : function(column) {
          return column.sort != null;
        },
        'sorted': (function(_this) {
          return function(d) {
            return d === _this.sort_column;
          };
        })(this)
      });
      this.body.style();
      this.rows.style(style_new);
      sort_column_i = this.columns.indexOf(this.sort_column);
      this.cells.style(style_new && (this.key != null)).all.classed({
        'sorted': function(d, i) {
          return i === sort_column_i;
        }
      });
      return (_ref1 = this.vis) != null ? _ref1.style(style_new && (this.key != null)) : void 0;
    };

    Table.prototype.sort = function(column, ascending) {
      if (column.sort) {
        if (ascending != null) {
          column.sort_ascending = ascending;
        } else if (this.sort_column === column) {
          column.sort_ascending = !column.sort_ascending;
        }
        this.sort_column = column;
        this._update_headers();
        return this.redraw('sort');
      }
    };

    Table.prototype.highlight = function(selections) {
      this.selections = selections != null ? selections : this.selections;
      this.rows.all.classed('selected', !this.selections.length ? false : (function(_this) {
        return function(d) {
          return __indexOf.call(_this.selections, d) >= 0;
        };
      })(this));
      return this.rows.all.classed('deselected', !this.selections.length ? false : (function(_this) {
        return function(d) {
          return !(__indexOf.call(_this.selections, d) >= 0);
        };
      })(this));
    };

    Table.prototype.select = function(selections) {
      this.selections = selections != null ? selections : this.selections;
      this.highlight();
      return this.trigger('select', this.selections);
    };

    Table.set_select = function(set, item, multi_select) {
      if (set == null) {
        return [item];
      } else if (multi_select) {
        if (__indexOf.call(set, item) >= 0) {
          c3.array.remove_item(set, item);
        } else {
          set.push(item);
        }
      } else {
        switch (set.length) {
          case 0:
            set.push(item);
            break;
          case 1:
            if (__indexOf.call(set, item) >= 0) {
              set.length = 0;
            } else {
              set.length = 0;
              set.push(item);
            }
            break;
          default:
            set.length = 0;
            set.push(item);
        }
      }
      return set;
    };

    return Table;

  })(c3.Base);

}).call(this);
